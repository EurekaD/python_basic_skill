"""
Cpython解释器的多线程 是  单核CPU多线程

Python中多线程由于有GIL的影响， 导致在任意时间内只有一个线程在运行，
所以Python的多线程在处理计算密集型任务上效果反而不如单线程， 只有在处理IO密集型任务上多线程才能发挥实力，
在等待IO过程中Python C源码会释放GIL， 最终会导致线程在等待IO过程中会被暂停去执行其他的线程。
python中GIL主要是由于历史原因导致Cpython虚拟机中的GIL难以移除，同时GIL的存在保证了多线程之间数据完整性以及状态同步。

https://www.zhihu.com/question/23474039


全局解释器锁（Global Interpreter Lock，简称 GIL）是 Python 解释器中的一个特性，用于确保在任意时刻只有一个线程执行 Python 字节码。GIL 是为了简化多线程程序的设计和实现而引入的。

1. GIL 的主要特点包括：

单一线程执行：
在任何给定的时刻，只有一个线程能够执行 Python 字节码。这使得 Python 解释器本身在多核系统上无法充分利用多核处理器的优势。

线程互斥：
GIL 引入了一个全局互斥锁，确保同时只有一个线程能够执行 Python 字节码。当一个线程获得了 GIL，其他线程必须等待。

影响多线程性能：
在 CPU 密集型任务中，GIL 可能导致多线程程序的性能不如预期，因为多个线程无法并行执行 Python 代码。然而，在 I/O 密集型任务中，GIL 的影响相对较小，因为线程在等待 I/O 操作完成时可以释放 GIL。

2. GIL 的影响：

阻碍多核处理器利用率：
在多核系统上，GIL 限制了 Python 解释器的并行性，使得多个 CPU 核心无法有效地同时执行 Python 代码。

适用场景：
GIL 对于 CPU 密集型任务的性能影响较大，但对于 I/O 密集型任务的影响较小，因为在 I/O 操作时，线程可以释放 GIL。

多线程并发：
在 CPython（官方的 Python 解释器）中，GIL 限制了多线程并发性能，因此在需要充分利用多核处理器的情况下，可以考虑使用多进程或其他并发模型。

3. 解决方法：
为了绕过 GIL 的限制，可以使用多进程、使用其他具有更好并发支持的解释器（例如 Jython 或 IronPython），或者使用 C 扩展模块实现并发部分。

4. 需要注意的是，不是所有的 Python 解释器都有 GIL。例如，Jython 使用 Java 虚拟机，
而 IronPython 使用 .NET 运行时，它们不受 GIL 的限制。 GIL 主要是 CPython 中的特性。


线程和进程是两种并发执行的机制，它们之间确实存在一些关系，但并没有包含关系。下面简要说明它们之间的关系：
独立性： 进程是独立执行的程序单位，每个进程都有自己的地址空间和资源。
线程是进程内的执行单元，多个线程共享同一进程的资源，包括内存空间和文件句柄等。
关系： 一个进程可以包含多个线程，这些线程共享相同的进程资源。这种情况下，线程被认为是进程的一部分。

通信与同步： 在多线程的情况下，线程之间通常通过共享内存进行通信，但需要谨慎处理同步问题。
在多进程的情况下，进程之间通信较为复杂，可以使用诸如队列（Queue）或管道（Pipe）等 IPC（进程间通信）机制。

独立性与容错性： 进程的独立性使得它们具有较好的容错性，一个进程的崩溃通常不会影响其他进程。
而线程之间的共享性可能导致一个线程的错误影响到其他线程，因此需要更谨慎的处理同步和资源共享问题。

总的来说，虽然进程和线程之间有关联，但它们是两个不同的概念，没有明显的包含关系。
在设计并发程序时，可以根据任务的性质和需求选择使用进程、线程，或它们的组合。


"""

from multiprocessing import Pool
from threading import Thread
from multiprocessing import Process


def loop():
    while True:
        pass

# 这个是多线程
# if __name__ == '__main__':
#     for i in range(3):
#         t = Thread(target=loop)
#         t.start()
#
#     while True:
#         pass


# 这个是多进程
if __name__ == '__main__':
    for i in range(5):
        t = Process(target=loop)
        t.start()

    while True:
        pass
