
"""
一旦使用多层文件架构就很容易遇上import的坑！哈哈

模块 module：
一般情况下，是一个以.py为后缀的文件。
其他可作为 module 的文件类型还有".pyo"、".pyc"、".pyd"、".so"、".dll"，但Python初学者几乎用不到。

module 可看作一个工具类，可共用或者隐藏代码细节，将相关代码放置在一个module以便让代码更好用、易懂，让coder重点放在高层逻辑上。
module能定义函数、类、变量，也能包含可执行的代码。module来源有3种：
①Python内置的模块（标准库）；
②第三方模块；
③自定义模块。

包 package：
为避免模块名冲突，Python引入了按目录组织模块的方法，称之为 包（package）。包 是含有Python模块的文件夹。
当一个文件夹下有   init   .py时，
意为该文件夹是一个包（package），其下的多个模块（module）构成一个整体，而这些模块（module）都可通过同一个包（package）导入其他代码中。
其中 __init__.py文件 用于组织包（package），方便管理各个模块之间的引用、控制着包的导入行为。


该文件可以什么内容都不写，即为空文件（为空时，仅仅用import [该包]形式 是什么也做不了的），存在即可，相当于一个标记。
但若想使用  from pacakge_1 import *  这种形式的写法，需在 __init__.py 中加上：
all = [‘file_a’, ‘file_b’]
#package_1 下有 file_a.py 和 file_b.py，在导入时 __init__.py 文件将被执行。

其中, __all__ 是一个重要的变量，用来指定此包（package）被 import * 时，哪些模块（module）会被 import 进【当前作用域中】。
不在 __all__ 列表中的模块不会被其他程序引用。可以重写 __all__ ，如 __all__ = [‘当前所属包模块1名字’, ‘模块1名字’]，如果写了这个，则会按列表中的模块名进行导入。

__path__ 也是一个常用变量，是个列表，默认情况下只有一个元素，即当前包（package）的路径。修改 __path__ 可改变包（package）内的搜索路径。


"""